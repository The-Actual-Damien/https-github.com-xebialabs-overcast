// build.gradle for the overcast project

/*
 * Release and publish instructions:
 *
 * Overthere can be automatically "closed" and "released" on maven central by calling gradle tasks
 * closeRepository, releaseRepository or closeAndReleaseRepository. Archives need to be uploaded manually.
 *
 * For example:
 * gradle clean build signArchives uploadArchives closeAndPromoteRepository
 *
 * prerequisites: Published PGP key installed and configured, authorised sonatype username and password configured
 */
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

version = '2.5.2'
//version = '2.5.1' // Last released version

group = 'com.xebialabs.cloud'

ext {
    slf4jVersion = '1.7.16'
    hamcrestVersion = '1.3'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'license'

    license {
        header rootProject.file("${rootProject.projectDir}/gradle/license-header")
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = 'XebiaLabs B.V.'
    }
}

apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'

dependencies {
    compile "org.slf4j:slf4j-api:${slf4jVersion}"

    compile 'com.amazonaws:aws-java-sdk:1.3.30'

    compile 'commons-io:commons-io:2.4'
    compile 'com.google.guava:guava:26.0-jre'
    compile 'org.apache.httpcomponents:httpcore:4.4.6'
    compile 'org.apache.httpcomponents:httpclient:4.5.3'
    compile 'com.hierynomus:sshj:0.26.0'
    compile 'com.xebialabs.overthere:overthere:5.0.3'

    compile 'org.libvirt:libvirt:0.5.1'
    // JNA version is pretty important only 3.3.0 seen working so far
    compile 'net.java.dev.jna:jna:3.3.0'
    compile 'org.jdom:jdom2:2.0.5'

    // docker-client and friends
    compile "com.spotify:docker-client:6.1.0"
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.0'  // appease annotation warnings in docker-client
    compile 'javax.ws.rs:javax.ws.rs-api:2.0.1'                     // appease annotation warnings in docker-client

    compile 'com.typesafe:config:1.2.1'

    testCompile "org.hamcrest:hamcrest-core:${hamcrestVersion}"
    testCompile "org.hamcrest:hamcrest-library:${hamcrestVersion}"
    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-core:1.9.0'

    testRuntime 'ch.qos.logback:logback-classic:1.0.9'
    testRuntime "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
    testRuntime "org.slf4j:log4j-over-slf4j:${slf4jVersion}"
}

allprojects {
    configurations.all*.exclude group: 'commons-logging', module: 'commons-logging'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    configurations {
        compile {
            transitive = false
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'http://download.java.net/maven/2/'
        }
        maven {
            url 'https://oss.sonatype.org/content/repositories/releases'
        }
        maven {
            url 'http://www.libvirt.org/maven2/'
        }
    }

    project.tasks.create("itest", Test).configure {
        description = "Run the integration tests."
        group = 'Test'
        includes = ["**/*Itest.*"]
        reports.junitXml.destination = project.file("${project.buildDir}/itest-results")
    }

    project.tasks.getByName("test").configure {
        excludes = ["**/*Itest.*", "**/*ItestSuite.*"]
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

nexusStaging {
    packageGroup = "com.xebialabs"
}

uploadArchives {
    if(project.hasProperty('sonatypeUsername')) {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signPom(deployment) }

            configuration = configurations.archives

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }
            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Cloudtest'
                description 'A Java library to test against hosts in the cloud. '
                packaging 'jar'
                url 'https://github.com/xebialabs/overcast'
                inceptionYear '2012'

                scm {
                    url 'https://github.com/xebialabs/overcast'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'vpartington'
                        name 'Vincent Partington'
                        url 'http://www.xebialabs.com/'
                        email 'vpartington@xebialabs.com'
                        roles {
                            role 'Developer'
                        }
                    }
                    developer {
                        id 'hierynomus'
                        name 'Jeroen van Erp'
                        url 'http://www.xebialabs.com/'
                        email 'jvanerp@xebialabs.com'
                        roles {
                            role 'Developer'
                        }
                    }
                    developer {
                        id 'mkotsur'
                        name 'Mike Kotsur'
                        url 'http://www.xebialabs.com/'
                        email 'mkotsur@xebialabs.com'
                        roles {
                            role 'Developer'
                        }
                    }
                    developer {
                        id 'rklaren'
                        name 'Ric Klaren'
                        url 'http://www.xebialabs.com/'
                        email 'rklaren@xebialabs.com'
                        roles {
                            role 'Developer'
                        }
                    }
                    developer {
                        id 'pvanderende'
                        name 'Paul van der Ende'
                        url 'http://www.xebialabs.com/'
                        email 'pvanderende@xebialabs.com'
                        roles {
                            role 'Developer'
                        }
                    }
                }
            }
        }
    }
}

task dumpVersion {
    file(buildDir).mkdirs()
    def out = file("$buildDir/version.dump")
    out.write("version=$project.version")
}
